image: registry.cmusatyalab.org/coda/coda-packaging/coda-deb-build:latest

stages:
 - early
 - prepare
 - build
 - deploy

# can't run pbuilder --create inside of docker build because we need privileged
# mode but we also can't run it in the docker:latest container because it isn't
# based on debian so we need another stage just to build the chroots
.chroots_template: &chroots_template
  stage: early
  image: ubuntu:bionic
  cache:
    key: debian_chroots
    paths:
      - coda-deb-build/chroots/
  artifacts:
    paths:
      - coda-deb-build/chroots/
    expire_in: 1 day
  script:
    - apt-get update && apt-get install -y debian-archive-keyring pbuilder sudo && apt-get clean
    - ./build-deb-chroots.sh $CI_JOB_NAME
  only:
    changes:
      - build-deb-chroots.sh
      - coda-deb-build/*

chroots:jessie:debian8.0:
    <<: *chroots_template
chroots:stretch:debian9.0:
    <<: *chroots_template
chroots:trusty:ubuntu14.04:
    <<: *chroots_template
chroots:xenial:ubuntu16.04:
    <<: *chroots_template
chroots:bionic:ubuntu18.04:
    <<: *chroots_template
chroots:cosmic:ubuntu18.10:
    <<: *chroots_template


# (re)build docker build containers
.prepare:docker_template: &docker_template
  stage: prepare
  image: docker:latest
  services:
    - docker:dind
  variables: &docker_variables
    DOCKER_DRIVER: overlay
    DOCKER_HOST: "tcp://localhost:2375"
  script:
    - docker info
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/$IMAGE || true
    - docker build --pull --cache-from $CI_REGISTRY_IMAGE/$IMAGE -t $CI_REGISTRY_IMAGE/$IMAGE $IMAGE
    - docker push $CI_REGISTRY_IMAGE/$IMAGE
  dependencies: []

prepare:docker_build:
  <<: *docker_template
  variables:
    <<: *docker_variables
    IMAGE: coda-build
  only:
    changes:
      - coda-build/*

prepare:docker_deb_build:
  <<: *docker_template
  variables:
    <<: *docker_variables
    IMAGE: coda-deb-build
  dependencies:
    - chroot:jessie:debian8.0
    - chroot:stretch:debian9.0
    - chroot:trusty:ubuntu14.04
    - chroot:xenial:ubuntu16.04
    - chroot:bionic:ubuntu18.04
    - chroot:cosmic:ubuntu18.10
  only:
    changes:
      - build-deb-chroots.sh
      - coda-deb-build/*

prepare:docker_rpm_build:
  <<: *docker_template
  variables:
    <<: *docker_variables
    IMAGE: coda-rpm-build
  only:
    changes:
      - coda-rpm-build/*


# build Coda binary packages
.setup:
  stage: prepare
  variables:
    REF: master
  script: ./setup-release.sh
  artifacts:
    paths:
      - coda-*.tar.?z
      - debian/
      - "*.src.rpm"
    expire_in: 1 week


.build:deb: &build_deb
  stage: build
  image: registry.cmusatyalab.org/coda/coda-packaging/coda-deb-build:latest
  script: ./build-debs.sh
  artifacts:
    paths:
      - dist/
    expire_in: 1 week

.build:rpm: &build_rpm
  stage: build
  image: registry.cmusatyalab.org/coda/coda-packaging/coda-rpm-build:latest
  script: ./build-rpms.sh
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - cache/
  artifacts:
    paths:
      - dist/*.rpm
    expire_in: 1 week

.deploy:
  stage: deploy
  script:
    - echo "copy artifacts to coda repos"
  when: manual


.build:jessie-amd64:
  <<: *build_deb

.build:jessie-i386:
  <<: *build_deb

.build:stretch-amd64:
  <<: *build_deb

.build:stretch-i386:
  <<: *build_deb

.build:trusty-amd64:
  <<: *build_deb

.build:trusty-i386:
  <<: *build_deb

.build:xenial-amd64:
  <<: *build_deb

.build:xenial-i386:
  <<: *build_deb

.build:bionic-amd64:
  <<: *build_deb

.build:bionic-i386:
  <<: *build_deb

.build:cosmic-amd64:
  <<: *build_deb

.build:cosmic-i386:
  <<: *build_deb

.build:fedora-28-x86_64:
  <<: *build_rpm

.build:fedora-28-i386:
  <<: *build_rpm

.build:fedora-29-x86_64:
  <<: *build_rpm

.build:fedora-29-i386:
  <<: *build_rpm

.build:fedora-30-x86_64:
  <<: *build_rpm

.build:fedora-30-i386:
  <<: *build_rpm

.build:epel-6-x86_64:
  <<: *build_rpm

.build:epel-7-coda-x86_64:
  <<: *build_rpm

